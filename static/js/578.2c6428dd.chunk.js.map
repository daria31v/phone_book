{"version":3,"file":"static/js/578.2c6428dd.chunk.js","mappings":"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","sources":["redux/selectors.jsx","components/ContactList/ContactList.styled.js","components/ContactItems/ContactItems.styled.js","components/ContactItems/ContactItems.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","views/ContactsView.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectValueFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectValueFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  width: 450px;\n  margin-top: 20px;\n  background-color: white;\n`;\nexport const Contact = styled.li`\n  display: flex;\n  gap: 5px;\n  width: 100%;\n  margin-top: 10px;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-content: stretch;\n  justify-content: flex-start;\n  align-items: baseline;\n`;\n","import styled from \"styled-components\";\n\nexport const WrapItem = styled.div`\ndisplay: flex;\nwidth: 350px;\ngap: 8px;\n`;\nexport const Item = styled.p`\nfont-size: 16px;\nfont-weight: 600;\n`;\nexport const Wrap = styled.div`\ndisplay: flex;\ngap: 10px;\n`;","import PropTypes from 'prop-types';\nimport { WrapItem, Wrap, Item } from './ContactItems.styled';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Box from '@mui/material/Box';\nimport { Input } from '@mui/material';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport { GiRotaryPhone } from 'react-icons/gi';\nimport { useState } from 'react';\nimport { existContacts } from '../../redux/contacts/operations';\n\nexport const ContactItems = ({ id, name: nameValue, number: numberValue }) => {\n  \n  const dispatch = useDispatch();\n  const [isEdit, setIsEdit] = useState(false);\n  const [name, setName] = useState(nameValue);\n  const [number, setNumber] = useState(numberValue);\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id))\n    alert(\"Contact deleted\")\n    return;    \n  };\n  \n  const handleChangeMode = () => {\n    if (isEdit) {\n      setIsEdit(prev => !prev);\n      dispatch(existContacts({ id, name, number }));\n      return;\n    }\n    setIsEdit(prev => !prev);\n  };\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        return;\n      case 'number':\n        setNumber(e.target.value);\n        return;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <Wrap>\n      <WrapItem>\n        <GiRotaryPhone /> \n        {isEdit ? (\n          <Input type=\"text\" value={name} name='name' onChange={handleChange} />\n        ) : (\n          <Item>{name}:</Item>\n        )}\n        {isEdit ? (\n          <Input\n            type=\"text\"\n            value={number}\n            name='number'\n            onChange={handleChange}\n          />\n        ) : (\n          <Item>{number}</Item>\n        )}\n      </WrapItem>\n\n      <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        '& > *': {\n          m: 1,\n        },\n      }}\n    >\n      <ButtonGroup variant=\"outlined\" aria-label=\"outlined button group\">\n        <Button onClick={handleDelete}>Delete</Button>\n        <Button onClick={handleChangeMode}>\n          {isEdit ? 'Save' : 'Edit'}\n        </Button>\n        </ButtonGroup>\n      </Box>\n    </Wrap>\n  );\n};\n\nContactItems.propTypes = {\n  item: PropTypes.objectOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n}.isRequired;\n","import PropTypes from 'prop-types';\nimport { List, Contact } from './ContactList.styled';\nimport { ContactItems } from '../ContactItems/ContactItems';\n\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  console.log(contacts)\n  return (\n    <>\n      <List>\n        <div>\n          {contacts.map(contact => (\n            <Contact key={contact._id}>\n              <ContactItems\n                id={contact._id}\n                name={contact.name}\n                number={contact.number}\n              />\n            </Contact>\n          ))}\n        </div>\n      </List>\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const FormAddContacts = styled.div`\ndisplay: flex;\ngap: 20px;\nmargin-bottom: 20px;\n`;\n\nexport const ErrorText = styled.p`\ncolor: red;\n`;\n\nexport const Lab = styled.label`\ndisplay: flex;\ngap: 8px;\nfont-size: 16px;\nfont-weight: 600;\n`;\n","import {Lab, FormAddContacts, ErrorText } from './ContactForm.styled';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Button from '@mui/material/Button';\nimport { Formik, Form,  ErrorMessage, Field} from 'formik';\nimport { nanoid } from 'nanoid';\nimport { Box } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/selectors';\nimport { Typography } from '@mui/material';\nimport Icon from '@mui/material/Icon';\n\n\nconst FormError = ({ name, number }) => {\n  return (\n      <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  \n   );\n};\n\n\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const listContacts = useSelector(selectContacts);\n\n  const submitForm = (values, { resetForm }) => {\n        console.log(values.number);\n    if (listContacts.some(item => item.name === values.name)) {\n      alert(`Contact <${values.name}> has already been added ⛔`)\n      return\n    }\n\n    if (!values.number.includes(\"+38\")){\n      alert(`Number <${values.number}> must start with +38!`)\n      return\n    }\n\n    dispatch(addContact(values));\n    alert(`Contact <${values.name}> was add ✅`)\n    resetForm();\n  \n  };\n\n  const nameInputId = nanoid();\n  const telInputId = nanoid();\n\n  return (\n    <>\n    <Box sx={{display: 'flex'}}>\n    <Typography variant=\"h5\" component=\"h3\" sx={{color: '#3493c9', marginBottom: '25px', alignItems: 'center', justifyItems:'center'}}>\n        Create new contact \n      </Typography>\n      <Icon sx={{ color: 'lightblue', marginLeft: '10px' }}>add_circle</Icon>\n      </Box>\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={submitForm}\n    >\n      <Form>\n        <FormAddContacts>\n          <Lab htmlFor={nameInputId}>\n            Name\n            <Field\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              id={nameInputId}\n            />\n            <FormError name=\"name\" component=\"span\" />\n          </Lab>\n\n          <Lab htmlFor={telInputId}>\n            Number\n            <Field\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"+380000000000\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              id={telInputId}\n            />\n            <FormError name=\"number\" component=\"span\" />\n          </Lab>\n        </FormAddContacts>\n\n        <ButtonGroup variant=\"outlined\" aria-label=\"outlined button group\" sx={{marginBottom: '40px'}}>\n          <Button type=\"submit\">Add contact</Button>\n        </ButtonGroup>\n      </Form>\n    </Formik>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  margin-right: 8px;\n  align-items: center;\n  font-size: 20px;\n  font-weight: 600;\n`;\n","import { Label } from './Filter.styled';\nimport { nanoid } from 'nanoid';\nimport { setFilter } from '../../redux/filter/filterSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectValueFilter } from '../../redux/selectors';\nimport PropTypes from 'prop-types';\nimport { Input } from '@mui/material';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectValueFilter);\n  const idInput = nanoid();\n\n  const changeFilter = e => {\n    const value = e.currentTarget.value.toLowerCase();\n    dispatch(setFilter(value));\n    \n  };\n\n  return (\n    <>\n      <Label htmlFor=\"idInput\">Find contacts by name</Label>\n      <Input\n        type=\"text\"\n        value={value}\n        onChange={changeFilter}\n        id={idInput}\n        sx={{ width: '250px' }}\n      ></Input>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n}.isRequired;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectError } from '../redux/selectors';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchAllContacts } from '../redux/contacts/operations';\nimport { selectIsLoading } from '../redux/selectors';\nimport { Typography } from '@mui/material';\n\nconst ContactsView = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your Phonebook</title>\n      </Helmet>\n      <ContactForm />\n\n      <Typography\n        variant=\"h5\"\n        component=\"h3\"\n        sx={{\n          color: '#3493c9',\n          marginBottom: '25px',\n          alignItems: 'center',\n          justifyItems: 'center',\n        }}\n      >\n        Your Phonebook :\n      </Typography>\n\n      <Filter />\n      {isLoading && !error && <p>Please waite the request in progress...🐌</p>}\n      {error && !isLoading && <p>Something went wrong... ♫ ♫ ♫ </p>}\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsView;\n"],"names":["selectContacts","state","contacts","items","selectValueFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","List","styled","Contact","WrapItem","Item","Wrap","ContactItems","id","nameValue","numberValue","number","dispatch","useDispatch","useState","isEdit","setIsEdit","setName","setNumber","handleChange","e","target","value","Input","type","onChange","Box","sx","display","flexDirection","alignItems","m","ButtonGroup","variant","Button","onClick","deleteContact","alert","prev","existContacts","ContactList","useSelector","console","log","map","_id","FormAddContacts","ErrorText","Lab","FormError","render","message","ContactForm","listContacts","nameInputId","nanoid","telInputId","Typography","component","color","marginBottom","justifyItems","Icon","marginLeft","initialValues","onSubmit","values","resetForm","some","item","addContact","htmlFor","placeholder","pattern","title","required","Label","Filter","idInput","currentTarget","setFilter","width","useEffect","fetchAllContacts","Helmet"],"sourceRoot":""}